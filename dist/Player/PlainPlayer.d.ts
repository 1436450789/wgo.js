import { PartialRecursive } from '../utils/makeConfig';
import { FieldObject } from '../BoardBase';
import PlayerBase from './PlayerBase';
import MarkupHandler from './boardPropertyHandlers/MarkupHandler';
import MarkupLineHandler from './boardPropertyHandlers/MarkupLineHandler';
import { Point } from '../types';
import MarkupLabelHandler from './boardPropertyHandlers/MarkupLabelHandler';
import ViewportHandler from './boardPropertyHandlers/ViewportHandler';
import MoveHandlerWithMark from './boardPropertyHandlers/MoveHandlerWithMark';
import { BoardBaseTheme } from '../BoardBase/types';
import { SVGDrawHandler } from '../SVGBoard/types';
import { SVGBoard } from '../SVGBoard';
export interface PlainPlayerConfig {
    boardTheme: BoardBaseTheme;
    highlightCurrentMove: boolean;
    currentMoveBlackMark: SVGDrawHandler;
    currentMoveWhiteMark: SVGDrawHandler;
    enableMouseWheel: boolean;
    enableKeys: boolean;
    showVariations: boolean;
    showCurrentVariations: boolean;
    variationDrawHandler: SVGDrawHandler;
}
export declare const defaultPlainPlayerConfig: PlainPlayerConfig;
export default class PlainPlayer extends PlayerBase {
    static propertyHandlers: {
        CR: MarkupHandler;
        DD: MarkupHandler;
        MA: MarkupHandler;
        SL: MarkupHandler;
        SQ: MarkupHandler;
        TR: MarkupHandler;
        LB: MarkupLabelHandler;
        AR: MarkupLineHandler;
        LN: MarkupLineHandler;
        VW: ViewportHandler;
        B: MoveHandlerWithMark;
        W: MoveHandlerWithMark;
        SZ: import("./basePropertyHandlers/BoardSizeHandler").default;
        RU: import("./basePropertyHandlers/RulesHandler").default;
        HA: import("./basePropertyHandlers/HandicapHandler").default;
        AW: import("./basePropertyHandlers/SetupHandler").default;
        AB: import("./basePropertyHandlers/SetupHandler").default;
        AE: import("./basePropertyHandlers/SetupHandler").default;
        PL: import("./basePropertyHandlers/SetTurnHandler").default;
    };
    element: HTMLElement;
    config: PlainPlayerConfig;
    board: SVGBoard;
    boardMouseX: number;
    boardMouseY: number;
    protected stoneBoardsObjects: FieldObject<any>[];
    protected variationBoardObjects: FieldObject<any>[];
    private _mouseWheelEvent;
    private _keyEvent;
    constructor(element: HTMLElement, config?: PartialRecursive<PlainPlayerConfig>);
    init(): void;
    destroy(): void;
    protected updateStones(): void;
    protected addVariationMarkup(): void;
    getVariations(): Point[];
    shouldShowVariations(): boolean;
    shouldShowCurrentVariations(): boolean;
    protected removeVariationMarkup(): void;
    protected handleBoardClick(point: Point): void;
    protected handleBoardMouseMove(point: Point): void;
    protected handleBoardMouseOut(): void;
    private handleVariationCursor;
    private removeVariationCursor;
}
